// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/go-sdk/api/secrets (interfaces: Secrets,SecretRef)

// Package mockapi is a generated GoMock package.
package mockapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	secrets "github.com/nitrictech/go-sdk/api/secrets"
)

// MockSecrets is a mock of Secrets interface.
type MockSecrets struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsMockRecorder
}

// MockSecretsMockRecorder is the mock recorder for MockSecrets.
type MockSecretsMockRecorder struct {
	mock *MockSecrets
}

// NewMockSecrets creates a new mock instance.
func NewMockSecrets(ctrl *gomock.Controller) *MockSecrets {
	mock := &MockSecrets{ctrl: ctrl}
	mock.recorder = &MockSecretsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecrets) EXPECT() *MockSecretsMockRecorder {
	return m.recorder
}

// Secret mocks base method.
func (m *MockSecrets) Secret(arg0 string) secrets.SecretRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secret", arg0)
	ret0, _ := ret[0].(secrets.SecretRef)
	return ret0
}

// Secret indicates an expected call of Secret.
func (mr *MockSecretsMockRecorder) Secret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockSecrets)(nil).Secret), arg0)
}

// MockSecretRef is a mock of SecretRef interface.
type MockSecretRef struct {
	ctrl     *gomock.Controller
	recorder *MockSecretRefMockRecorder
}

// MockSecretRefMockRecorder is the mock recorder for MockSecretRef.
type MockSecretRefMockRecorder struct {
	mock *MockSecretRef
}

// NewMockSecretRef creates a new mock instance.
func NewMockSecretRef(ctrl *gomock.Controller) *MockSecretRef {
	mock := &MockSecretRef{ctrl: ctrl}
	mock.recorder = &MockSecretRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretRef) EXPECT() *MockSecretRefMockRecorder {
	return m.recorder
}

// Latest mocks base method.
func (m *MockSecretRef) Latest() secrets.SecretVersionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest")
	ret0, _ := ret[0].(secrets.SecretVersionRef)
	return ret0
}

// Latest indicates an expected call of Latest.
func (mr *MockSecretRefMockRecorder) Latest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*MockSecretRef)(nil).Latest))
}

// Name mocks base method.
func (m *MockSecretRef) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSecretRefMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSecretRef)(nil).Name))
}

// Put mocks base method.
func (m *MockSecretRef) Put(arg0 context.Context, arg1 []byte) (secrets.SecretVersionRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(secrets.SecretVersionRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockSecretRefMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSecretRef)(nil).Put), arg0, arg1)
}

// Version mocks base method.
func (m *MockSecretRef) Version(arg0 string) secrets.SecretVersionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0)
	ret0, _ := ret[0].(secrets.SecretVersionRef)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockSecretRefMockRecorder) Version(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockSecretRef)(nil).Version), arg0)
}
