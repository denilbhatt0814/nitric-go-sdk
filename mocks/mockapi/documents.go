// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/go-sdk/api/documents (interfaces: Documents,CollectionRef)

// Package mockapi is a generated GoMock package.
package mockapi

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	documents "github.com/nitrictech/go-sdk/api/documents"
	v1 "github.com/nitrictech/nitric/core/pkg/api/nitric/v1"
)

// MockDocuments is a mock of Documents interface.
type MockDocuments struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentsMockRecorder
}

// MockDocumentsMockRecorder is the mock recorder for MockDocuments.
type MockDocumentsMockRecorder struct {
	mock *MockDocuments
}

// NewMockDocuments creates a new mock instance.
func NewMockDocuments(ctrl *gomock.Controller) *MockDocuments {
	mock := &MockDocuments{ctrl: ctrl}
	mock.recorder = &MockDocumentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocuments) EXPECT() *MockDocumentsMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockDocuments) Collection(arg0 string) documents.CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", arg0)
	ret0, _ := ret[0].(documents.CollectionRef)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockDocumentsMockRecorder) Collection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDocuments)(nil).Collection), arg0)
}

// MockCollectionRef is a mock of CollectionRef interface.
type MockCollectionRef struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionRefMockRecorder
}

// MockCollectionRefMockRecorder is the mock recorder for MockCollectionRef.
type MockCollectionRefMockRecorder struct {
	mock *MockCollectionRef
}

// NewMockCollectionRef creates a new mock instance.
func NewMockCollectionRef(ctrl *gomock.Controller) *MockCollectionRef {
	mock := &MockCollectionRef{ctrl: ctrl}
	mock.recorder = &MockCollectionRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionRef) EXPECT() *MockCollectionRefMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockCollectionRef) Collection(arg0 string) documents.CollectionGroupRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", arg0)
	ret0, _ := ret[0].(documents.CollectionGroupRef)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockCollectionRefMockRecorder) Collection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockCollectionRef)(nil).Collection), arg0)
}

// Doc mocks base method.
func (m *MockCollectionRef) Doc(arg0 string) documents.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Doc", arg0)
	ret0, _ := ret[0].(documents.DocumentRef)
	return ret0
}

// Doc indicates an expected call of Doc.
func (mr *MockCollectionRefMockRecorder) Doc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doc", reflect.TypeOf((*MockCollectionRef)(nil).Doc), arg0)
}

// Name mocks base method.
func (m *MockCollectionRef) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCollectionRefMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCollectionRef)(nil).Name))
}

// Parent mocks base method.
func (m *MockCollectionRef) Parent() documents.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(documents.DocumentRef)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockCollectionRefMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockCollectionRef)(nil).Parent))
}

// Query mocks base method.
func (m *MockCollectionRef) Query() documents.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(documents.Query)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockCollectionRefMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCollectionRef)(nil).Query))
}

// ToWire mocks base method.
func (m *MockCollectionRef) ToWire() *v1.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWire")
	ret0, _ := ret[0].(*v1.Collection)
	return ret0
}

// ToWire indicates an expected call of ToWire.
func (mr *MockCollectionRefMockRecorder) ToWire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWire", reflect.TypeOf((*MockCollectionRef)(nil).ToWire))
}
