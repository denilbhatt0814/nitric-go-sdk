// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/deploy/v1/deploy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployServiceClient is the client API for DeployService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployServiceClient interface {
	// Begins a new deployment
	// Server will stream updates back to the connected client
	// on the status of the deployment
	Up(ctx context.Context, in *DeployUpRequest, opts ...grpc.CallOption) (DeployService_UpClient, error)
	// Tears down an existing deployment
	// Server will stream updates back to the connected client
	// on the status of the teardown
	Down(ctx context.Context, in *DeployDownRequest, opts ...grpc.CallOption) (DeployService_DownClient, error)
}

type deployServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployServiceClient(cc grpc.ClientConnInterface) DeployServiceClient {
	return &deployServiceClient{cc}
}

func (c *deployServiceClient) Up(ctx context.Context, in *DeployUpRequest, opts ...grpc.CallOption) (DeployService_UpClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeployService_ServiceDesc.Streams[0], "/nitric.deploy.v1.DeployService/Up", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployServiceUpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployService_UpClient interface {
	Recv() (*DeployUpEvent, error)
	grpc.ClientStream
}

type deployServiceUpClient struct {
	grpc.ClientStream
}

func (x *deployServiceUpClient) Recv() (*DeployUpEvent, error) {
	m := new(DeployUpEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployServiceClient) Down(ctx context.Context, in *DeployDownRequest, opts ...grpc.CallOption) (DeployService_DownClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeployService_ServiceDesc.Streams[1], "/nitric.deploy.v1.DeployService/Down", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployServiceDownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployService_DownClient interface {
	Recv() (*DeployDownEvent, error)
	grpc.ClientStream
}

type deployServiceDownClient struct {
	grpc.ClientStream
}

func (x *deployServiceDownClient) Recv() (*DeployDownEvent, error) {
	m := new(DeployDownEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeployServiceServer is the server API for DeployService service.
// All implementations should embed UnimplementedDeployServiceServer
// for forward compatibility
type DeployServiceServer interface {
	// Begins a new deployment
	// Server will stream updates back to the connected client
	// on the status of the deployment
	Up(*DeployUpRequest, DeployService_UpServer) error
	// Tears down an existing deployment
	// Server will stream updates back to the connected client
	// on the status of the teardown
	Down(*DeployDownRequest, DeployService_DownServer) error
}

// UnimplementedDeployServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeployServiceServer struct {
}

func (UnimplementedDeployServiceServer) Up(*DeployUpRequest, DeployService_UpServer) error {
	return status.Errorf(codes.Unimplemented, "method Up not implemented")
}
func (UnimplementedDeployServiceServer) Down(*DeployDownRequest, DeployService_DownServer) error {
	return status.Errorf(codes.Unimplemented, "method Down not implemented")
}

// UnsafeDeployServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployServiceServer will
// result in compilation errors.
type UnsafeDeployServiceServer interface {
	mustEmbedUnimplementedDeployServiceServer()
}

func RegisterDeployServiceServer(s grpc.ServiceRegistrar, srv DeployServiceServer) {
	s.RegisterService(&DeployService_ServiceDesc, srv)
}

func _DeployService_Up_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployUpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployServiceServer).Up(m, &deployServiceUpServer{stream})
}

type DeployService_UpServer interface {
	Send(*DeployUpEvent) error
	grpc.ServerStream
}

type deployServiceUpServer struct {
	grpc.ServerStream
}

func (x *deployServiceUpServer) Send(m *DeployUpEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _DeployService_Down_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployDownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployServiceServer).Down(m, &deployServiceDownServer{stream})
}

type DeployService_DownServer interface {
	Send(*DeployDownEvent) error
	grpc.ServerStream
}

type deployServiceDownServer struct {
	grpc.ServerStream
}

func (x *deployServiceDownServer) Send(m *DeployDownEvent) error {
	return x.ServerStream.SendMsg(m)
}

// DeployService_ServiceDesc is the grpc.ServiceDesc for DeployService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.deploy.v1.DeployService",
	HandlerType: (*DeployServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Up",
			Handler:       _DeployService_Up_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Down",
			Handler:       _DeployService_Down_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/deploy/v1/deploy.proto",
}
